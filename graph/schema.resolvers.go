package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"log"

	pb "github.com/lyazii22/picnic-asg1/crud/proto"
	"github.com/lyazii22/picnic-asg1/graph/model"
	"google.golang.org/grpc"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure(),
		grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewCrudClient(conn)

	req := &pb.CreateUserRequest{Firstname: input.FirstName, Lastname: input.LastName}
	res, err := client.CreateUser(ctx, req)
	if err != nil {
		return &model.User{}, fmt.Errorf("error while creating user: %v", err)
	}
	user := &model.User{
		ID:        res.Id,
		FirstName: res.Firstname,
		LastName:  res.Lastname,
	}

	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.OldUser) (*model.Status, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure(),
		grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewCrudClient(conn)

	req := &pb.UserInfo{Id: input.ID,
		Firstname: input.FirstName, Lastname: input.LastName}
	res, err := client.UpdateUser(ctx, req)
	if err != nil {
		return &model.Status{Status: int(-1)}, fmt.Errorf("error while updating user: %v", err)
	}

	return &model.Status{Status: int(res.Status)}, nil
}

// DeletedUser is the resolver for the deletedUser field.
func (r *mutationResolver) DeletedUser(ctx context.Context, input model.IDInput) (*model.Status, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure(),
		grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewCrudClient(conn)

	req := &pb.Id{Id: input.ID}             //prepare
	res, err := client.DeleteUser(ctx, req) //client procedure

	if err != nil {
		return &model.Status{Status: int(-1)}, fmt.Errorf("error while deleting user: %v", err)
	}

	return &model.Status{Status: int(res.Status)}, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, input string) (*model.User, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure(),
		grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewCrudClient(conn)

	req := &pb.Id{Id: input}
	res, err := client.GetUser(ctx, req)

	if err != nil {
		return &model.User{}, fmt.Errorf("error while getting user: %v", err)
	}
	user := &model.User{
		ID:        res.Id,
		FirstName: res.Firstname,
		LastName:  res.Lastname,
	}

	return user, nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure(),
		grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	client := pb.NewCrudClient(conn)

	req := &pb.Empty{}
	res, err := client.GetUsers(ctx, req)

	if err != nil {
		return []*model.User{}, fmt.Errorf("error while getting user: %v", err)
	}
	users := []*model.User{}
	for _, rawUser := range res.Users {
		user := &model.User{
			ID:        rawUser.Id,
			FirstName: rawUser.Firstname,
			LastName:  rawUser.Lastname,
		}
		users = append(users, user)
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) User(ctx context.Context, input string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}
